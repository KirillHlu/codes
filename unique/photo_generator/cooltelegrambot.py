import telebot
import time
import os
from test import *
from telebot import types

API_TOKEN = "8370523593:AAG34Z4qw0xUNlEJ6auFTyfTG0Itp6OVR1E"
bot = telebot.TeleBot(API_TOKEN)

user_states = {}


def create_design_function(users_room, promt_from_user):
    api = FusionBrainAPI('https://api-key.fusionbrain.ai/', '2948185B516F87FF7ACC7C372FD6F395',
                         '31F11AFFD2CBD8CBF83D371CDAB5F505')
    try:
        pipeline_id = api.get_pipeline()
        print(f"Pipeline ID: {pipeline_id}")

        uuid = api.generate(f"create a design for {users_room}: {promt_from_user}", pipeline_id)
        print(f"Request UUID: {uuid}")

        files = api.check_generation(uuid)

        if files:
            timestamp = int(time.time())
            filename = f"generated_image_{timestamp}.png"

            saved_file = api.save_image(files, filename)

            if saved_file:
                print(f"Image successfully saved: {saved_file}")
                return saved_file
            else:
                print("Failed to save image")
                return None
        else:
            print("Failed to get image")
            return None

    except Exception as e:
        print(f"Error: {e}")
        return None


def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_create = types.KeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω")
    btn_help = types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    btn_examples = types.KeyboardButton("üìã –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç")
    markup.add(btn_create, btn_help, btn_examples)
    return markup


def create_cancel_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_cancel = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
    markup.add(btn_cancel)
    return markup


def create_room_types_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    rooms = ["–ì–æ—Å—Ç–∏–Ω–∞—è", "–°–ø–∞–ª—å–Ω—è", "–ö—É—Ö–Ω—è", "–í–∞–Ω–Ω–∞—è", "–ö–∞–±–∏–Ω–µ—Ç", "–î–µ—Ç—Å–∫–∞—è", "–ü—Ä–∏—Ö–æ–∂–∞—è", "–ë–∞–ª–∫–æ–Ω"]
    buttons = [types.KeyboardButton(room) for room in rooms]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return markup


@bot.message_handler(commands=['start'])
def welcome(message):
    welcome_text = """
üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞ –∫–æ–º–Ω–∞—Ç!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –ª—é–±–æ–π –∫–æ–º–Ω–∞—Ç—ã. 

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üé® –°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω" –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /create
    """
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_main_keyboard())


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
üìñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

1. –ù–∞–∂–º–∏—Ç–µ "üé® –°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π
3. –û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–∏–∑–∞–π–Ω (—Å—Ç–∏–ª—å, —Ü–≤–µ—Ç–∞, –º–µ–±–µ–ª—å –∏ —Ç.–¥.)
4. –î–æ–∂–¥–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

üìù **–ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏—è:**
- "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≥–æ—Å—Ç–∏–Ω–∞—è –≤ —Å–≤–µ—Ç–ª—ã—Ö —Ç–æ–Ω–∞—Ö —Å –±–æ–ª—å—à–∏–º –¥–∏–≤–∞–Ω–æ–º –∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º"
- "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–ø–∞–ª—å–Ω—è —Å –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–π –º–µ–±–µ–ª—å—é –∏ –º—è–≥–∫–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º"
- "–Ø—Ä–∫–∞—è –¥–µ—Ç—Å–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å –∏–≥—Ä–æ–≤–æ–π –∑–æ–Ω–æ–π –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–±–æ—è–º–∏"

üí° **–°–æ–≤–µ—Ç:** –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
    """
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown', reply_markup=create_main_keyboard())


@bot.message_handler(commands=['create'])
def create_design_command(message):
    start_design_process(message.chat.id)


def start_design_process(chat_id):
    user_states[chat_id] = {'step': 'waiting_room_type'}
    bot.send_message(chat_id,
                     "üè† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:",
                     reply_markup=create_room_types_keyboard())


@bot.message_handler(func=lambda message: message.text == "üé® –°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω")
def create_design_button(message):
    start_design_process(message.chat.id)


@bot.message_handler(func=lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
def help_button(message):
    help_command(message)


@bot.message_handler(func=lambda message: message.text == "üìã –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç")
def examples_button(message):
    examples_text = """
üìã **–ü—Ä–∏–º–µ—Ä—ã —Ç–∏–ø–æ–≤ –∫–æ–º–Ω–∞—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–π:**

üè† **–ì–æ—Å—Ç–∏–Ω–∞—è:**
   - "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≥–æ—Å—Ç–∏–Ω–∞—è –≤ —Å—Ç–∏–ª–µ –ª–æ—Ñ—Ç —Å –∫–∏—Ä–ø–∏—á–Ω–æ–π —Å—Ç–µ–Ω–æ–π"
   - "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≥–æ—Å—Ç–∏–Ω–∞—è —Å –∫–∞–º–∏–Ω–æ–º –∏ –º—è–≥–∫–∏–º–∏ –∫—Ä–µ—Å–ª–∞–º–∏"

üõèÔ∏è **–°–ø–∞–ª—å–Ω—è:**
   - "–£—é—Ç–Ω–∞—è —Å–ø–∞–ª—å–Ω—è –≤ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å –ø–∞—Å—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ–Ω–∞–º–∏"
   - "–†–æ—Å–∫–æ—à–Ω–∞—è —Å–ø–∞–ª—å–Ω—è —Å –±–æ–ª—å—à–æ–π –∫—Ä–æ–≤–∞—Ç—å—é –∏ –≥–∞—Ä–¥–µ—Ä–æ–±–Ω–æ–π"

üç≥ **–ö—É—Ö–Ω—è:**
   - "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫—É—Ö–Ω—è —Å –æ—Å—Ç—Ä–æ–≤–æ–º –∏ –±–∞—Ä–Ω—ã–º–∏ —Å—Ç—É–ª—å—è–º–∏"
   - "–î–µ—Ä–µ–≤–µ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ–≤–∞–Ω—Å"

üõÅ **–í–∞–Ω–Ω–∞—è:**
   - "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å –¥–∂–∞–∫—É–∑–∑–∏ –∏ —Å—Ç–µ–∫–ª—è–Ω–Ω–æ–π –¥—É—à–µ–≤–æ–π"
   - "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –≤–∞–Ω–Ω–∞—è —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏"
    """
    bot.send_message(message.chat.id, examples_text, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
def cancel_button(message):
    user_states.pop(message.chat.id, None)
    bot.send_message(message.chat.id,
                     "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                     reply_markup=create_main_keyboard())


@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    chat_id = message.chat.id
    user_state = user_states.get(chat_id, {})

    if user_state.get('step') == 'waiting_room_type':
        user_states[chat_id] = {
            'step': 'waiting_description',
            'room_type': message.text
        }
        bot.send_message(chat_id,
                         f"üè† –í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}\n\n"
                         f"üìù –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–∏–∑–∞–π–Ω:\n"
                         f"(—Å—Ç–∏–ª—å, —Ü–≤–µ—Ç–∞, –º–µ–±–µ–ª—å, –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ —Ç.–¥.)",
                         reply_markup=create_cancel_keyboard())

    elif user_state.get('step') == 'waiting_description':
        room_type = user_state['room_type']
        description = message.text

        user_states.pop(chat_id, None)

        processing_msg = bot.send_message(chat_id,
                                          "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∏–∑–∞–π–Ω... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                                          reply_markup=types.ReplyKeyboardRemove())

        try:
            image_path = create_design_function(room_type, description)

            if image_path and os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    bot.send_photo(chat_id, photo,
                                   caption=f"üé® –ì–æ—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è {room_type}!\n"
                                           f"üìù –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {description}")

                bot.delete_message(chat_id, processing_msg.message_id)

                markup = types.InlineKeyboardMarkup()
                btn_new_design = types.InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –¥–∏–∑–∞–π–Ω", callback_data="new_design")
                markup.add(btn_new_design)

                bot.send_message(chat_id,
                                 "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –¥–∏–∑–∞–π–Ω?",
                                 reply_markup=markup)
                try:
                    os.remove(image_path)
                except:
                    pass
            else:
                bot.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                      chat_id, processing_msg.message_id)
                bot.send_message(chat_id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=create_main_keyboard())

        except Exception as e:
            print(f"Error in design generation: {e}")
            bot.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                  chat_id, processing_msg.message_id)
            bot.send_message(chat_id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=create_main_keyboard())

    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞
        bot.send_message(chat_id,
                         "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
                         reply_markup=create_main_keyboard())


@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    if call.data == "new_design":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        start_design_process(call.message.chat.id)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        time.sleep(15)
